import numpy as np
import matplotlib.pyplot as plt
import astropy.units as u
import astropy.constants as c
from datetime import datetime
from scipy.signal import savgol_filter

### Part 1: Data ###
data_ground = """2.5977813996604726 -1.1529660140152795
2.6477927993177475 -1.1591559806892358
2.700304768957886 -1.1666249280173624
2.7528167385980247 -1.1728305403885009
2.803828366248445 -1.179420904693165
2.8728440977754843 -1.1851862339238777
2.9253560674156227 -1.1900105075233647
3.001055140533225 -1.1973964735593612
3.112898816130403 -1.2037336570286676
3.1804142056677245 -1.2078499077401723
3.2829375749651377 -1.213274777785721
3.384835801766835 -1.2173273989893185
3.532994573251512 -1.2197674816886386
3.6980321921205186 -1.22132794466177
3.8630698109895256 -1.2205179643143647
4.028107429858533 -1.2190981323197478
4.19314504872754 -1.216683065707952
4.358182667596546 -1.2133115281461317
4.523220286465554 -1.2090078596113376
4.680756195385969 -1.2052369661297617
4.838292104306385 -1.201053014222831
5.0033297231753915 -1.1965106336168152
5.168367342044399 -1.192491832961576
5.3334049609134055 -1.1881584155659421
5.498442579782412 -1.1841286168469987
5.66348019865142 -1.180402977693124
5.828517817520426 -1.1771657607453978
5.993555436389433 -1.1741367858235485
6.15859305525844 -1.1716000193264997
6.323630674127447 -1.1694418746946822
6.488668292996453 -1.1677948695809266
6.653705911865461 -1.1661667955604327
6.8187435307344675 -1.1650025333248468
6.983781149603475 -1.1641096167593434
7.1488187684724815 -1.1635164425038147
7.313856387341488 -1.1630242340790142
7.478894006210496 -1.1626402033299938
7.643931625079502 -1.1622669903485519
7.808969243948509 -1.16200195504289
7.974006862817516 -1.1618946788477411
8.139044481686522 -1.1617369197372283
8.30408210055553 -1.1615854709911357
8.469119719424537 -1.1616233331776589
8.634157338293544 -1.1613772289652586
8.799194957162552 -1.1613772289652586
8.964232576031558 -1.161452953338305
9.129270194900563 -1.1613204356854738
9.29430781376957 -1.1611689869393815
9.459345432638578 -1.1611689869393815
9.624383051507586 -1.1611689869393815
9.789420670376593 -1.1611689869393815
9.9544582892456 -1.16139616005852
10.119495908114605 -1.161187918032643
10.284533526983612 -1.1611689869393815
10.44957114585262 -1.1611689869393815
10.614608764721627 -1.1611689869393815
10.779646383590634 -1.1611689869393815
10.944684002459642 -1.1612598561870369
11.109721621328646 -1.1611500558461199
11.274759240197653 -1.1611689869393815
11.43979685906666 -1.1611689869393815
11.604834477935668 -1.1611689869393815
11.769872096804676 -1.1611689869393815
11.934909715673683 -1.1612111762329358
12.09994733454269 -1.1611500558461199
12.264984953411695 -1.1611689869393815
12.430022572280702 -1.1611689869393815
12.59506019114971 -1.1611689869393815
12.760097810018717 -1.1611733140464127
12.925135428887724 -1.1611689869393815
13.090173047756732 -1.1611689869393815
13.255210666625736 -1.1611689869393815
13.420248285494743 -1.1612503906404061
13.58528590436375 -1.1611311247528584
13.750323523232758 -1.1611689869393815
13.915361142101766 -1.1611689869393815
14.080398760970773 -1.1611689869393815
14.245436379839777 -1.1611689869393815
14.410473998708785 -1.1611689869393815
14.575511617577792 -1.1611689869393815
14.7405492364468 -1.1611689869393815
14.868078305572851 -1.1611689869393815
"""

data_excited_s = """2.702669947541182 -1.0208830688863086
2.7224031606397383 -1.0231945284291015
2.743658494858844 -1.0257930319674047
2.7649138290779494 -1.0271376064726896
2.7861691632970547 -1.029826755483259
2.8180521646257133 -1.0339511244713797
2.8499351659543715 -1.0371086084219923
2.8711905001734768 -1.039646681645451
2.8924458343925825 -1.041731527507578
2.913701168611688 -1.04360486726775
2.934956502830793 -1.0464062440058874
2.9668395041594517 -1.0491191334972885
2.99872250548811 -1.0516481421735209
3.024530612701717 -1.0543161405738948
3.073116175254979 -1.0572772260012635
3.11562684369319 -1.0597850840673002
3.1581375121314013 -1.0618850375081381
3.200648180569612 -1.0640907439999536
3.253786516117376 -1.066437454559739
3.317552518774692 -1.0679884993074082
3.3688969258589507 -1.0694792425345958
3.419578123026399 -1.0705205294993827
3.4918625678119346 -1.0712272396212672
3.573839662447257 -1.0715768390386016
3.6540953105771963 -1.071435152360511
3.7377938517179023 -1.070877640203933
3.799276672694394 -1.0701784413692643
3.838308207142777 -1.069672994333692
3.949898711793081 -1.067588148471565
4.065740283287205 -1.0654806412413715
4.13234033050707 -1.0637583772683101
4.1992683585874335 -1.0619756829804046
4.291139240506329 -1.0600400582665697
4.302383004259914 -1.0595282552292122
4.393610608800483 -1.0574180626365624
4.46534056660639 -1.0559175439172677
4.516576250753465 -1.0549708667152222
4.592872571921022 -1.0533341479576757
4.7215189873417724 -1.0532228696285506
4.8239903556359245 -1.0537472687545522
4.9754685878649205 -1.0539686662635404
5.090415913200722 -1.0544464675892207
5.192887281494876 -1.0539220684632193
5.225218764939411 -1.0533568093257422
5.35806460380882 -1.0513399475678151
5.464341274904347 -1.0495572532799096
5.561784207353828 -1.0485032774945375
5.7046073171907175 -1.047649381911255
5.985700375573792 -1.0476448579172792
6.224219473237369 -1.0485525992956237
6.479283483866634 -1.049549699490554
6.705652793300109 -1.05081420382867
6.973470004460838 -1.0518384976652801
7.239161682199656 -1.0530168888047433
7.510167193493253 -1.0541952799442063
7.813055706115506 -1.0549657664584706
8.220449611981694 -1.0559024363385565
8.482598734017328 -1.056476524329577
8.695152076208384 -1.0566517722426254
8.911247974102622 -1.0569901820057532
9.230259192284507 -1.057068463219228
9.41783343965797 -1.0570506123205976
9.65164211606813 -1.0570506123205976
9.88119972563447 -1.0571321932456372
10.125332421522481 -1.057154207146045
10.365214050566673 -1.0568693213760647
10.597504488818325 -1.056688030431532
10.833438698650397 -1.0564704812980927
11.065121841638646 -1.0562348030702
11.284051784095434 -1.0560716412201205
11.556651445455461 -1.0558268984450012
11.836218133031752 -1.055580141326054
12.117260885484368 -1.0554189938198024
12.351069561894528 -1.0552377028752697
12.81868691471485 -1.055056411930737
13.105633926672773 -1.0548751209862042
13.381953271521144 -1.0548751209862042
13.615761947931306 -1.0548751209862042
14.005424954792042 -1.0546212672978879
14.90717299578059 -1.0546212672978879
16.423749246534058 -1.0546212672978879
17.5919228450874 -1.0546212672978879
19.84629294755877 -1.0544464675892207
"""

data_excited_p = """2.9668395041594517 -0.9772372739900429
3.0082085817572506 -0.9806969095148768
3.0518608410358734 -0.9838543934654892
3.1049991765836373 -0.9874651047774337
3.1581375121314013 -0.9906981266216015
3.200648180569612 -0.9937800726786588
3.243158849007823 -0.9969526642079823
3.2951555937151746 -1.000623805834771
3.328180185884245 -1.0035697836834285
3.381318521432009 -1.009945181899498
3.42382918987022 -1.0139940129940632
3.4450845240893253 -1.0168946681065876
3.4663398583084306 -1.0196140322745793
3.4875951925275364 -1.0253609552162684
3.4875951925275364 -1.0222427509703045
3.5619888622944056 -1.028905193181884
3.592349742502514 -1.0302195525297466
3.625754864951722 -1.0332561758506706
3.65763786628038 -1.0357489263379964
3.678893200499486 -1.037743126727857
3.6948347011638147 -1.0400319249025831
3.802174138970298 -1.0440701806920507
3.913082407189784 -1.0452053819300222
3.96584021245741 -1.0495270381224873
3.9969621532257933 -1.0517327446143028
4.15713822042936 -1.0560761734937338
4.362606451214045 -1.0577153457838844
4.536191680670074 -1.0577757760987285
4.835790677282228 -1.0579700163964423
5.103000593179555 -1.058138357987794
5.361607159512005 -1.058108142830372
5.587622213375159 -1.0583559071212334
5.815054289519589 -1.0583423103003935
6.132366064647664 -1.0581901554005178
6.391073846857347 -1.0578120342876352
6.658182546877439 -1.0572319032651303
6.884906111881232 -1.0568088910612206
7.249789349309209 -1.0562121417021335
7.511938471344843 -1.0559024363385565
7.8661940416632685 -1.0556229461324018
8.14251338651164 -1.0553585635049583
8.344439061593143 -1.0552377028752697
8.665394608301636 -1.0550926701196435
8.865194749961226 -1.0550337505626703
9.463886663799366 -1.054844905828782
9.95984446224516 -1.0548751209862042
10.395578813736822 -1.0546938300416715
10.629387490146984 -1.0546938300416715
10.863196166557143 -1.0546938300416715
11.128887844295962 -1.0546938300416715
11.96847354595063 -1.0546333997268271
12.956846587139035 -1.0546938300416715
13.955847295436994 -1.0546938300416715
14.954848003734952 -1.054603184569405
15.730667702732303 -1.0545125390971386
15.921965710704253 -1.0545125390971386
16.198285055552624 -1.0545125390971386
16.432093731962784 -1.0545125390971386
16.665902408372943 -1.0545125390971386
16.899711084783107 -1.0545125390971386
17.133519761193266 -1.0545125390971386
17.367328437603426 -1.0545125390971386
17.601137114013586 -1.0545125390971386
17.83494579042375 -1.0545125390971386
18.086973324736 -1.0545125390971386
18.30256314324407 -1.0545125390971386
18.536371819654228 -1.0545125390971386
18.770180496064388 -1.0545125390971386
19.00398917247455 -1.0545125390971386
19.23779784888471 -1.0545125390971386
19.47160652529487 -1.0545125390971386
19.70541520170503 -1.0545125390971386
19.88608554256743 -1.0545125390971386
"""

data_ground_R = np.array(data_ground.rsplit()[0::2],dtype=float)
data_ground_E = np.array(data_ground.rsplit()[1::2],dtype=float)

data_excited_s_R = np.array(data_excited_s.rsplit()[0::2],dtype=float)
data_excited_s_E = np.array(data_excited_s.rsplit()[1::2],dtype=float)

data_excited_p_R = np.array(data_excited_p.rsplit()[0::2],dtype=float)
data_excited_p_E = np.array(data_excited_p.rsplit()[1::2],dtype=float)

plt.plot(data_ground_R,data_ground_E,label="Ground")
plt.plot(data_excited_s_R,data_excited_s_E,label="Excited ($\Sigma$)")
plt.plot(data_excited_p_R,data_excited_p_E,label="Excited ($\Pi$)")
plt.legend()
plt.xlabel("Distance, $a_0$")
plt.ylabel("Energy, Hartrees")
plt.show()

# Check far-field value
E_diff = (data_excited_s_E[-1] - data_ground_E[-1])*27.2*u.eV
wavelength = (c.h*c.c/E_diff).to(u.Angstrom)
print(wavelength)

E_diff = (data_excited_p_E[-1] - data_ground_E[-1])*27.2*u.eV
wavelength = (c.h*c.c/E_diff).to(u.Angstrom)
print(wavelength)

### Part 2: Probability distribution ###
# Define probability distribution
def distance_dist(r,n):
    return (4*np.pi*r**2*n*np.exp(-4/3*np.pi*r**3*n)).to(u.m**-1)

# Plot probability distribution
n1 = 1e20*u.cm**(-3)
n2 = 1e21*u.cm**(-3)
n3 = 1e22*u.cm**(-3)
r=np.linspace(0.01,20,num=101)*c.a0

plt.plot(r/c.a0,distance_dist(r,n1)*c.a0,label="n = $10^{20}$ cm$^{-3}$")
plt.plot(r/c.a0,distance_dist(r,n2)*c.a0,label="n = $10^{21}$ cm$^{-3}$")
plt.plot(r/c.a0,distance_dist(r,n3)*c.a0,label="n = $10^{22}$ cm$^{-3}$")
plt.legend()
plt.xlabel("Distance, $a_0$")
plt.ylabel("Probability Density")
plt.show()

print(sum((r[1:]-r[:-1])*((distance_dist(r,n1))[1:]+(distance_dist(r,n1))[:-1])/2))

### Part 3: Lorentzian profile
def compute_lorentzian_f(Gamma,nu_0,nu_range):
    return Gamma/(4*np.pi**2)/((nu_range-nu_0)**2+(Gamma/(4*np.pi**2))**2)

l_0 = 4227*u.Angstrom
nu_0 = c.c/(l_0)
width = 20
l_range = np.linspace((4227-width)*u.Angstrom,(4227+width)*u.Angstrom,num=1001)
nu_range = c.c/l_range
Gamma = 2.18e8*u.Hz

lorentzian_f = compute_lorentzian_f(Gamma, nu_0, nu_range)
lorentzian_l = ((nu_0**2)/c.c*lorentzian_f).to(u.Angstrom**-1)

### Part 3B: Voigt profile
from scipy.special import voigt_profile
# Params
T = 2500*u.K
# Generate Voigt profile
l_0 = 4227*u.Angstrom
nu_0 = c.c/(l_0)
width = 20
l_range = np.linspace((4227-width)*u.Angstrom,(4227+width)*u.Angstrom,num=1001)
nu_range = c.c/l_range
Gamma = 2.18e8*u.Hz
Dnu_Doppler = (np.sqrt(2*c.k_B*(T)/(40*u.u))/c.c*nu_0).cgs
# Normalisation from lecture 8
voigt_f = voigt_profile((nu_range-nu_0).to(u.Hz).value, (Dnu_Doppler/np.sqrt(2)).to(u.Hz).value, Gamma.to(u.Hz).value/4/np.pi)*u.s
voigt_l = ((nu_0**2)/c.c*voigt_f).to(u.Angstrom**-1)
plt.plot(l_range,lorentzian_l,label="Lorentzian")
plt.plot(l_range,voigt_l,label="Voigt")
# Show results
plt.yscale("log")
plt.legend()
plt.xlabel("Wavelength, $\AA$")
plt.ylabel(r"Line profile, $\phi(\lambda)$")
plt.xlim(4225,4229)
plt.show()
#plt.savefig("Lines")

### Part 4: Values at distance
def interpolate(x,x_list,y_list):
    if x<=min(x_list):
        return (y_list[1]-y_list[0])/(x_list[1]-x_list[0])*(x-x_list[0])+y_list[0]
    elif x>=max(x_list):
        return y_list[-1]
    else:
        checking = True
        i=1
        while checking:
           if x_list[i]>=x:
               checking = False
               return (y_list[i]-y_list[i-1])/(x_list[i]-x_list[i-1])*(x-x_list[i-1])+y_list[i-1]
           else:
               i+=1
               
# Test interpolate
energy_ground = np.zeros(len(r))
energy_excited_s = np.zeros(len(r))
energy_excited_p = np.zeros(len(r))
for i, dist in enumerate(r):
    energy_ground[i] = interpolate(dist/c.a0,data_ground_R,data_ground_E)
    energy_excited_s[i] = interpolate(dist/c.a0,data_excited_s_R,data_excited_s_E)
    energy_excited_p[i] = interpolate(dist/c.a0,data_excited_p_R,data_excited_p_E)
    
plt.plot(r/c.a0,energy_ground,label="Ground")
plt.plot(r/c.a0,energy_excited_s,label="Excited ($\Sigma$)")
plt.plot(r/c.a0,energy_excited_p,label="Excited ($\Pi$)")
plt.legend()
plt.xlabel("Distance, $a_0$")
plt.ylabel("Energy, Hartrees")
plt.show()

### Part 5: Putting it all together
print("Beginnning preliminary computations")
print(datetime.now())
# Define parameters
n = 1e21*u.cm**(-3)
T = 2500*u.K
Gamma = 10*2.18e8*u.Hz
width = 100
centre = 4272 # In Angstrom
Dnu_Doppler = (np.sqrt(2*c.k_B*(T)/(40*u.u))/c.c*nu_0).cgs
num_sum = 50001
num_l_divs = 50001
num_report = 10
report_when = num_sum // num_report
# Pre-define line profile
l_range = np.linspace((centre-width)*u.Angstrom,(centre+width)*u.Angstrom,num=num_l_divs)
nu_range = c.c/l_range
line_vals = np.zeros(len(l_range))*u.Angstrom**-1
# Define considered radii
r_bins = np.linspace(0.0,25.0,num=num_sum)*c.a0
r_deltas = r_bins[1:]-r_bins[:-1]
r_vals = (r_bins[1:]+r_bins[:-1])/2
# Define proability of being at given r
prob_r_vals = distance_dist(r_vals,n1)*c.a0
# Find energy differences at each r
energy_ground_vals = np.zeros(len(r_vals))*u.eV
energy_excited_s_vals = np.zeros(len(r_vals))*u.eV
energy_excited_p_vals = np.zeros(len(r_vals))*u.eV
for i, dist in enumerate(r_vals):
    energy_ground_vals[i] = interpolate(dist/c.a0,data_ground_R,data_ground_E)*27.2*u.eV
    energy_excited_s_vals[i] = interpolate(dist/c.a0,data_excited_s_R,data_excited_s_E)*27.2*u.eV
    energy_excited_p_vals[i] = interpolate(dist/c.a0,data_excited_p_R,data_excited_p_E)*27.2*u.eV
energy_diff_s_vals = (energy_excited_s_vals-energy_ground_vals)
energy_diff_p_vals = (energy_excited_p_vals-energy_ground_vals)
# Find central frequencies at each r
nu_0_s_vals = energy_diff_s_vals/c.h
nu_0_p_vals = energy_diff_p_vals/c.h
# Compute broadened line profile
print("Beginnning summation")
print(datetime.now())
reports_made = 0
for i in range(len(r_deltas)):
    # Compute line profile for two processes
    nu_0_s = nu_0_s_vals[i]
    nu_0_p = nu_0_p_vals[i]
    voigt_f_s = voigt_profile((nu_range-nu_0_s).to(u.Hz).value, (Dnu_Doppler/np.sqrt(2)).to(u.Hz).value, Gamma.to(u.Hz).value/4/np.pi)*u.s
    voigt_f_p = voigt_profile((nu_range-nu_0_p).to(u.Hz).value, (Dnu_Doppler/np.sqrt(2)).to(u.Hz).value, Gamma.to(u.Hz).value/4/np.pi)*u.s
    voigt_l_s = ((nu_0_s**2)/c.c*voigt_f_s).to(u.Angstrom**-1)
    voigt_l_p = ((nu_0_p**2)/c.c*voigt_f_p).to(u.Angstrom**-1)
    # Add to complete profile
    line_vals += r_deltas[i].value*prob_r_vals*(1/3)*(voigt_l_s+2*voigt_l_p)
    # Track progress
    if i % report_when == 0:
        reports_made += 1
        print("Percentage completion: {}%".format(reports_made*10))
        print(datetime.now())
# Smooth results
line_vals_smooth = savgol_filter(line_vals,101,1)
print("Computation completed")
print(datetime.now())
# Show result
plt.plot(l_range,line_vals_smooth)
plt.xlabel("Wavelength, $\AA$")
plt.ylabel("Line profile, $\AA^{-1}$")
plt.yscale("log")
plt.show()